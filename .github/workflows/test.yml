name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      working-directory: ./backend
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      working-directory: ./backend
      run: poetry install --no-interaction
    
    - name: Run linting
      working-directory: ./backend
      run: |
        poetry run flake8 app tests
        poetry run black --check app tests
        poetry run mypy app
    
    - name: Run unit tests
      working-directory: ./backend
      run: poetry run pytest tests/ -m "unit" --cov=app --cov-report=xml
    
    - name: Run integration tests
      working-directory: ./backend
      run: poetry run pytest tests/ -m "integration" --cov=app --cov-append --cov-report=xml
      env:
        # Don't run AI tests in CI unless API key is provided
        OPENAI_API_KEY: ""
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella
